package com.qwerty_mini_wide.app.keyboard

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Rect
import android.os.Build
import android.os.Handler
import android.os.Looper
import android.os.SystemClock
import android.os.VibrationEffect
import android.os.Vibrator
import android.util.AttributeSet
import android.util.Log
import android.view.MotionEvent
import android.view.View
import android.view.ViewGroup
import android.widget.ImageButton
import android.widget.TextView
import android.widget.LinearLayout
import androidx.annotation.RequiresApi
import com.qwerty_mini_wide.app.R
import com.qwerty_mini_wide.app.databinding.CustomKeyboardViewBinding
import com.qwerty_mini_wide.app.keyboard.model.CurrentLanguage
import com.qwerty_mini_wide.app.keyboard.model.KeyLetter
import com.qwerty_mini_wide.app.keyboard.model.KeyModel
import com.qwerty_mini_wide.app.keyboard.model.KeyType
import com.qwerty_mini_wide.app.keyboard.manager.InputManager
import com.qwerty_mini_wide.app.keyboard.service.CustomKeyBoard_Service
import androidx.recyclerview.widget.LinearLayoutManager
import java.io.BufferedReader
import java.io.InputStreamReader


class CustomKeyboardView @JvmOverloads constructor(
    context: Context, attrs: AttributeSet? = null
) : LinearLayout(context, attrs) {




    private val binding: CustomKeyboardViewBinding
    var currentState:KeyType = KeyType.ENG
    var currentLanguage: CurrentLanguage = CurrentLanguage.ENG
    var touchSize:Int = 0
    
    // 햅틱 피드백을 위한 Vibrator
    private val vibrator: Vibrator by lazy {
        context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
    }

    // 더블탭 간격 기준(ms)
    private val DOUBLE_TAP_THRESHOLD = 300L

    // 마지막 Shift 클릭 시각
    private var lastShiftClickTime = 0L

    // Shift 자동 해제 타이머
    private val shiftAutoReleaseHandler = Handler(Looper.getMainLooper())
    private var shiftAutoReleaseRunnable: Runnable? = null
    
    // 연타 기능이 있는 키 (shift + 연타 → rb_txt 출력)
    private val doubleTapKeys = setOf("w", "r", "t", "y", "s", "d", "c", "h", "n", "m", 
                                      "W", "R", "T", "Y", "S", "D", "C", "H", "N", "M")
    
    // 자동 해제만 적용되는 키 (연타 기능 없음)
    private val shiftAutoReleaseKeys = setOf("e", "u", "i", "o", "a", "l",
                                             "E", "U", "I", "O", "A", "L")
    
    // 마지막 탭한 키와 시간 추적 (연타 감지용)
    private var lastTappedKey: String? = null
    private var lastTapTime = 0L
    
    // ↓ 이 부분을 클래스 바로 안쪽(다른 멤버 변수들 옆)에 추가
    private val deleteHandler = Handler(Looper.getMainLooper())
    private val deleteRunnable = object : Runnable {
        override fun run() {
            baseDelete()
           // listener?.onKey(KeyType.DELETE, "")
            // 50ms 간격으로 반복
            deleteHandler.postDelayed(this, 50)
        }
    }

    fun baseDelete(){
        if (composingLength > 0) {

            automata.deleteBuffer()
            val composed = automata.buffer.joinToString("")
            listener?.onKey(KeyType.KOR, composed)
            //proxy?.commitText(composed, 1)
            composingLength = composed.length
        } else {
            listener?.onKey(KeyType.DELETE, "")

        }
    }

    interface OnKeyboardActionListener {
        /** code: Unicode int or special KEYCODE_* */
        fun onKey(code: KeyType, text: String?)
    }

    private var listener: OnKeyboardActionListener? = null

    init {
        orientation = VERTICAL
        val view = inflate(context, R.layout.custom_keyboard_view, this)
        binding = CustomKeyboardViewBinding.bind(view)
        setupSuggestionBar()
        initViews()
        binding.hanjaRecycler.layoutManager = LinearLayoutManager(context,LinearLayoutManager.HORIZONTAL,false)
        binding.hanjaRecycler.adapter = Hanja_Adapter(this)

        HanjaManager.init(context)

    }

    fun initViews(){
        setupKeys()
        setLetter(KeyLetter.getEngLetter())
        setFuntion(KeyLetter.getEngFunction())
        
        // 엔터 버튼 강제 업데이트
        updateEnterButton()
    }
    
    // 엔터 버튼만 업데이트하는 메서드
    fun updateEnterButton() {
        val service = context as? CustomKeyBoard_Service
        val actionId = service?.actionId ?: 0
        
        for(i in 0 until binding.funtionLinear.childCount){
            if(binding.funtionLinear.getChildAt(i) is CustomKeyButton){
                val keyButton = binding.funtionLinear.getChildAt(i) as CustomKeyButton
                if(keyButton.keyModel?.keyType == KeyType.RETURN || 
                   keyButton.keyModel?.mainText == "return" || 
                   keyButton.keyModel?.image == R.drawable.ic_enter){
                    keyButton.setData(keyButton.keyModel!!, actionId)
                    break
                }
            }
        }
    }




    // 마지막 단어 저장용
    var chnLastWord: String = ""

    @RequiresApi(Build.VERSION_CODES.VANILLA_ICE_CREAM)
    override fun onItemClick(hanjaEntry: HanjaEntry) {

        Log.i("chnLastWord.count()",chnLastWord.count().toString())
        Log.i("chnLastWord",chnLastWord)
        for(i in 0..<chnLastWord.count()){
            listener?.onKey(KeyType.DELETE, "")
           // proxy?.deleteSurroundingText(1, 0)
        }
        listener?.onKey(KeyType.LETTER, hanjaEntry.hanja)
        //proxy?.commitText(hanjaEntry.hanja,1)
        (binding.hanjaRecycler.adapter as Hanja_Adapter).setitem(arrayListOf())
        automata.deleteBuffer()
        composingLength = 0
       // proxy?.finishComposingText()
        automata = HangulAutomata()

        hanjaLinearIsVisible(false)
    }

    fun chnTap() {
        // 1) 커서 앞 텍스트 모두 가져오기 (최대 1000자)

        val service = context as? CustomKeyBoard_Service
        var before = service?.currentInputConnection
            ?.getTextBeforeCursor(1000, 0)
            ?.toString() ?: ""

        // 2. 만약 정말 빈 문자열("", null 등)이라면, 자체 버퍼를 fallback으로 쓴다
        if (before.isEmpty()) {
            //val service = context as? CustomKeyBoard_Service
            before = service?.getTypedBuffer().orEmpty()
            Log.i("CustomKeyboardView", "fallback to typedBuffer: '$before'")
        }
        Log.i("Porxy",before)
        // 2) 공백·개행·구두점으로 분리
        val separators = Regex("[\\s\\p{Punct}]+")
        val tokens = before
            .split(separators)
            .filter { it.isNotEmpty() }

        // 마지막 토큰이 마지막 단어
        var lastWord = tokens.lastOrNull() ?: ""
        Log.i("lastWord",lastWord)
        if(lastWord != ""){
            lastWord = (lastWord[lastWord.count() - 1] ?: "").toString()
        }


        // 3) before에서 마지막 단어가 등장한 인덱스 찾기
        val idx = before.lastIndexOf(lastWord)
        if (idx != -1) {
            // 4) 시작 인덱스부터 끝까지 잘라내기
            val lastWordWithSpaces = before.substring(idx)
            // 이미 공백이 포함되어 있으면 뭔가 빠진 거니 리턴
            if (lastWordWithSpaces.contains(" ")) {
                return
            }
            Log.d("MyKeyboardService", ">>> '$lastWordWithSpaces'")
        }

        // 5) ViewModel에 한자 조회 결과 전달
        val entries = HanjaManager.entries(lastWord) ?: emptyList()
        if(entries.count() ==0){
            hanjaLinearIsVisible(false)
        }else{
            hanjaLinearIsVisible(true)
            (binding.hanjaRecycler.adapter as Hanja_Adapter).setitem(entries)
            // 6) 마지막 단어 저장
            chnLastWord = lastWord
            Log.d("MyKeyboardService", "word : $lastWord")
        }



    }

    fun hanjaLinearIsVisible(isVisible:Boolean){

        if(isVisible){
            binding.hanjaLinear.visibility = VISIBLE
        }else{
            binding.hanjaLinear.visibility = GONE
        }
    }

    fun setOnKeyboardActionListener(l: OnKeyboardActionListener) {
        listener = l
    }

    private fun setupSuggestionBar() {
        findViewById<ImageButton>(R.id.btnArrowDown).setOnClickListener {
            listener?.onKey(KeyType.LETTER, "ㅏ")
        }
        findViewById<ImageButton>(R.id.btnArrowUp).setOnClickListener {
           // listener?.onKey(CODE_NEXT, null)
        }
        findViewById<TextView>(R.id.tvDone).setOnClickListener {
           // listener?.onKey(CODE_DONE, null)
        }
    }

    fun setFuntion(fountions:List<KeyModel>){
        var count = 0
        for(i in 0 until binding.funtionLinear.childCount){
            if(binding.funtionLinear.getChildAt(i) is CustomKeyButton){
                val keyButon = binding.funtionLinear.getChildAt(i) as CustomKeyButton
                val service = context as? CustomKeyBoard_Service

                keyButon.setData(fountions[count],service?.actionId ?: 0)
                count++
            }
        }
    }

    @SuppressLint("ResourceType")
    fun resetShift(){
        for(i in 0 until binding.funtionLinear.childCount){
            if(binding.funtionLinear.getChildAt(i) is CustomKeyButton){
                val keyButon = binding.funtionLinear.getChildAt(i) as CustomKeyButton
                if(keyButon.keyModel!!.keyType == KeyType.ONSHIFT){
                    keyButon.setBackgroundDrawable(resources.getDrawable(keyButon.keyModel!!.backgroundColor))
                    // key.setBackgroundColor(keyModel.backgroundColor)
                    keyButon.getIcImageView().setImageDrawable(resources.getDrawable(keyButon.keyModel!!.image))
                    keyButon.keyModel!!.keyType = KeyType.SHIFT
                    if(currentLanguage == CurrentLanguage.KOR){
                        setLetter(KeyLetter.getKorLetters())
                    }else{
                        setLetter(KeyLetter.getEngLetter())
                    }
                }
            }
        }
    }
    
    // Shift 자동 해제 타이머 시작
    private fun startShiftAutoReleaseTimer() {
        // 기존 타이머 취소
        cancelShiftAutoReleaseTimer()
        
        // Shift Lock 모드에서는 자동 해제하지 않음
        if (isShiftLocked()) return
        
        // 0.3초 후 자동 해제
        shiftAutoReleaseRunnable = Runnable {
            resetShift()
        }
        shiftAutoReleaseHandler.postDelayed(shiftAutoReleaseRunnable!!, 300)
    }
    
    // Shift 자동 해제 타이머 취소
    private fun cancelShiftAutoReleaseTimer() {
        shiftAutoReleaseRunnable?.let {
            shiftAutoReleaseHandler.removeCallbacks(it)
        }
        shiftAutoReleaseRunnable = null
    }
    
    // Shift Lock 상태 확인
    private fun isShiftLocked(): Boolean {
        for(i in 0 until binding.funtionLinear.childCount){
            if(binding.funtionLinear.getChildAt(i) is CustomKeyButton){
                val keyButton = binding.funtionLinear.getChildAt(i) as CustomKeyButton
                if(keyButton.keyModel?.keyType == KeyType.LOCKSHIFT){
                    return true
                }
            }
        }
        return false
    }
    
    // 햅틱 피드백 실행 메서드
    private fun performHapticFeedback() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            // 진동 시간을 20ms로 늘리고, 진폭을 최대값(255)으로 설정
            vibrator.vibrate(VibrationEffect.createOneShot(20, 255))
        } else {
            @Suppress("DEPRECATION")
            vibrator.vibrate(20)
        }
    }

    fun setLetter(letters:List<List<KeyModel>>){

        var count = 0
        for(i in 0 until binding.firstLinear.childCount){
            if(binding.firstLinear.getChildAt(i) is CustomKeyButton){
                val keyButon = binding.firstLinear.getChildAt(i) as CustomKeyButton
                keyButon.setData(letters[0][count])
                count++

            }
        }

        count = 0
        for(i in 0 until binding.secondLinear.childCount){
            if(binding.secondLinear.getChildAt(i) is CustomKeyButton){
                val keyButon = binding.secondLinear.getChildAt(i) as CustomKeyButton
                keyButon.setData(letters[1][count])
                count++
            }
        }
    }


    fun Context.loadJsonFromAssets(fileName: String): String {
        assets.open(fileName).use { inputStream ->
            BufferedReader(InputStreamReader(inputStream)).use { reader ->
                return reader.readText()
            }
        }
    }




    @SuppressLint("ResourceType", "ClickableViewAccessibility")
    private fun setupKeys() {


        // 뷰 트리 순회해서 CustomKeyButton 모두 찾기
        val keys = mutableListOf<CustomKeyButton>()
        fun traverse(v: View) {
            if (v is CustomKeyButton) keys += v
            else if (v is ViewGroup) {
                for (i in 0 until v.childCount) traverse(v.getChildAt(i))
            }
        }
        traverse(this)

        // 클릭 리스너 설정
        keys.forEach { key ->


            key.setOnTouchListener { _, event ->
                // DELETE 키만 long-press 반복 처리
                if (key.keyModel?.keyType == KeyType.DELETE) {
                    when (event.action) {
                        MotionEvent.ACTION_DOWN -> {
                            baseDelete()
                            // 누르는 순간 한 번 삭제
                            //listener?.onKey(KeyType.DELETE, "")
                            // 500ms 후부터 반복 삭제 시작
                            deleteHandler.postDelayed(deleteRunnable, 500)
                        }
                        MotionEvent.ACTION_UP,
                        MotionEvent.ACTION_CANCEL -> {
                            // 손 떼면 반복 삭제 멈춤
                            deleteHandler.removeCallbacks(deleteRunnable)
                        }
                    }
                    true  // touch event consume
                } else {
                    false
                }
            }


            key.setOnLongClickListener {
                when {
                    key.keyModel?.keyType == KeyType.ENG ->{
                        Log.i("setOnLongClickListener_2","setOnLongClickListener")
                        chnTap()
                        commitText()
                        listener?.onKey(KeyType.CHN,"")
                    }
                }
                true
            }

            key.setOnClickListener {
                performHapticFeedback() // 햅틱 피드백 추가
                hanjaLinearIsVisible(false)
                val icon = key.getIconRes()
                val main = key.getMainText()
                val keyModel = key.keyModel

                when{
                    keyModel!!.keyType == KeyType.ENG ->{
                        commitText()
                        currentState = KeyType.ENG
                       // binding.spaceEnter.visibility = GONE
                        currentLanguage = CurrentLanguage.ENG
                        setLetter(KeyLetter.getEngLetter())
                        setFuntion(KeyLetter.getEngFunction())
                        listener?.onKey(KeyType.ENG,"")
                    }


                    keyModel.keyType == KeyType.LETTER ->{
                        if(touchSize == 0){
                            tapLetter(key)
                        }
                        // Shift 리셋은 tapLetter 내부에서 처리됨
                    }

                    keyModel.keyType == KeyType.DELETE ->{

                        baseDelete()

                    }

                    keyModel.keyType == KeyType.NUMBER ->{
                        automata.deleteBuffer()
                        currentState = KeyType.NUMBER
                        //binding.spaceEnter.visibility = GONE
                        setLetter(KeyLetter.getNumberLetter(currentLanguage))
                        setFuntion(KeyLetter.getNumberFuntion(currentLanguage))
                        listener?.onKey(KeyType.NUMBER,"")
                    }

                    keyModel.keyType == KeyType.SPECIAL ->{
                        automata.deleteBuffer()
                        currentState = KeyType.SPECIAL
                       // binding.spaceEnter.visibility = GONE
                        setLetter(KeyLetter.getSpecialLetter(currentLanguage))
                        setFuntion(KeyLetter.getSpectialFuntion(currentLanguage))
                    }

                    keyModel.keyType == KeyType.CHN ->{
                        chnTap()
                        commitText()
                        listener?.onKey(KeyType.CHN,"")


                    }

                    keyModel.keyType == KeyType.SPACE ->{
                        commitText()
                        listener?.onKey(KeyType.SPACE, " ")
                       // proxy?.commitText(" ",1)
                    }


                    keyModel.keyType == KeyType.ONSHIFT ->{
                        val now = SystemClock.elapsedRealtime()
                        if (now - lastShiftClickTime < DOUBLE_TAP_THRESHOLD) {
                            // ─── 더블 클릭: Shift 잠금 토글 ───
                            keyModel.keyType = KeyType.LOCKSHIFT

                        } else {
                            key.setBackgroundDrawable(resources.getDrawable(keyModel.backgroundColor))
                            // key.setBackgroundColor(keyModel.backgroundColor)
                            key.getIcImageView().setImageDrawable(resources.getDrawable(keyModel.image))
                            keyModel.keyType = KeyType.SHIFT
                            if(currentLanguage == CurrentLanguage.KOR){
                        setLetter(KeyLetter.getKorLetters())
                    }else{
                        setLetter(KeyLetter.getEngLetter())
                    }
                        }


                       // setFuntion(KeyLetter.getKorFunction())
                    }

                    keyModel.keyType == KeyType.LOCKSHIFT ->{
                        key.setBackgroundDrawable(resources.getDrawable(keyModel.backgroundColor))
                        // key.setBackgroundColor(keyModel.backgroundColor)
                        key.getIcImageView().setImageDrawable(resources.getDrawable(keyModel.image))
                        keyModel.keyType = KeyType.SHIFT
                        if(currentLanguage == CurrentLanguage.KOR){
                        setLetter(KeyLetter.getKorLetters())
                    }else{
                        setLetter(KeyLetter.getEngLetter())
                    }
                    }

                    keyModel.keyType == KeyType.SHIFT ->{



                        if(touchSize == 0) {
                            key.setBackgroundDrawable(resources.getDrawable(keyModel.selectBackgroundColor))
                            key.getIcImageView()
                                .setImageDrawable(resources.getDrawable(keyModel.selectImage))
                            keyModel.keyType = KeyType.ONSHIFT
                            if (currentLanguage == CurrentLanguage.KOR) {
                                setLetter(KeyLetter.getShiftLetter())
                            } else {
                                setLetter(KeyLetter.getEngShiftLetter())
                            }
                            lastShiftClickTime = SystemClock.elapsedRealtime()
                        }


                    }

                    keyModel.keyType == KeyType.RETURN -> {
                        commitText() // 기존 조합 중인 글자 정리
                        listener?.onKey(KeyType.RETURN, "\n")
                    }


                }




            }
        }
    }

    fun commitText(){
        automata.deleteBuffer()
        composingLength = 0
        val service = context as? com.qwerty_mini_wide.app.keyboard.service.CustomKeyBoard_Service
        service?.currentInputConnection?.finishComposingText()
        automata = HangulAutomata()
    }

    private fun isShiftOn(): Boolean {
        for(i in 0 until binding.funtionLinear.childCount){
            if(binding.funtionLinear.getChildAt(i) is CustomKeyButton){
                val keyButton = binding.funtionLinear.getChildAt(i) as CustomKeyButton
                if(keyButton.keyModel?.keyType == KeyType.ONSHIFT || keyButton.keyModel?.keyType == KeyType.LOCKSHIFT){
                    return true
                }
            }
        }
        return false
    }

    @RequiresApi(Build.VERSION_CODES.VANILLA_ICE_CREAM)
    fun tapLetter(keyButton: CustomKeyButton) {
        // 영어 모드에서 Shift가 켜져있는 경우
        if (currentState == KeyType.ENG && isShiftOn()) {
            val keyText = keyButton.keyModel?.ltText ?: ""
            val now = SystemClock.elapsedRealtime()
            
            // 연타 기능이 있는 키 처리
            if (doubleTapKeys.contains(keyText)) {
                // 같은 키를 0.3초 이내에 다시 눌렀는지 확인
                if (lastTappedKey == keyText && now - lastTapTime < DOUBLE_TAP_THRESHOLD) {
                    // 연타 감지 - rb_txt 출력
                    val rbText = keyButton.keyModel?.rbText ?: ""
                    if (rbText.isNotEmpty()) {
                        // 이전에 입력한 대문자 삭제
                        listener?.onKey(KeyType.DELETE, "")
                        // rb_txt 문자 출력 (대문자로)
                        listener?.onKey(KeyType.LETTER, rbText.uppercase())
                        // Shift 즉시 해제
                        resetShift()
                        cancelShiftAutoReleaseTimer()
                        lastTappedKey = null
                        lastTapTime = 0L
                        return
                    }
                } else {
                    // 첫 번째 탭 - 대문자 출력하고 타이머 시작
                    lastTappedKey = keyText
                    lastTapTime = now
                    startShiftAutoReleaseTimer()
                }
            }
            // 자동 해제만 적용되는 키 처리
            else if (shiftAutoReleaseKeys.contains(keyText)) {
                // 타이머 시작
                startShiftAutoReleaseTimer()
                lastTappedKey = null
                lastTapTime = 0L
            }
            // 다른 키는 타이머 취소하고 Shift 해제
            else {
                cancelShiftAutoReleaseTimer()
                lastTappedKey = null
                lastTapTime = 0L
            }
        } else {
            // Shift가 꺼져있거나 다른 언어 모드인 경우 타이머 관련 변수 초기화
            lastTappedKey = null
            lastTapTime = 0L
        }
        
        // 기존 로직 계속 실행
        val ch = InputManager.shared.handleTap(keyButton, currentState, isShiftOn())

        Log.d("Keyboard", "ch : $ch")

        if (InputManager.shared.tapCount == 1) {


            if (currentState == KeyType.KOR) {

                // 2) 새로운 키 처리
                automata.hangulAutomata(ch)
                val composed = automata.buffer.joinToString("")
                Log.d("Keyboard", "composed : $composed")
                // 3) 새로 조합된 문자열 삽입
                listener?.onKey(KeyType.KOR, composed)
               // proxy?.commitText(composed,0)

                // 4) 삭제할 길이 갱신
                composingLength = composed.length
            } else {
                listener?.onKey(KeyType.LETTER, ch)
               // proxy?.commitText(ch,1)
            }

        } else {
            if (currentState == KeyType.KOR) {
                if(arrayOf("ㅅ","ㅗ","ㅏ","ㅜ","ㅓ","ㅜ").contains(keyButton.keyModel!!.mainText) ){
                            if(InputManager.shared.tapCount > 2){
                                InputManager.shared.tapCount = 1
                            }else{
                                automata.deleteBuffer()
                            }
                }else{
                    if(InputManager.shared.tapCount > 3){
                        InputManager.shared.tapCount = 1
                    }else{
                        automata.deleteBuffer()
                    }
                }

                // 2) 새로운 키 처리
                automata.hangulAutomata(ch)
                val composed = automata.buffer.joinToString("")
                listener?.onKey(KeyType.KOR, composed)
                // 3) 새로 조합된 문자열 삽입
                //proxy?.commitText(composed,1)

                // 4) 삭제할 길이 갱신
                composingLength = composed.length
            } else {

                if (InputManager.shared.tapCount > 1){
                    InputManager.shared.tapCount = 0
                }else{
                   automata.deleteBuffer()
                }
                listener?.onKey(KeyType.DELETE, "")
                listener?.onKey(KeyType.LETTER, ch)
             //   proxy?.deleteSurroundingText(1,0)
               // proxy?.commitText(ch,1)
            }
        }
        
        // InputManager의 다중 탭이 진행 중이 아니고, Shift가 켜져 있지 않은 경우에만 Shift 리셋
        if(!InputManager.shared.isMultiTapInProgress() && !isShiftOn()) {
            resetShift()
        }
    }

    // 첫/두 번째 터치된 키 버튼을 저장할 변수
    private var firstTouchedKey: CustomKeyButton? = null
    private var secondTouchedKey: CustomKeyButton? = null
    private var firstTouchTime: Long = 0L
    private val SIMULTANEOUS_THRESHOLD = 100L // 100ms 시간 차이 허용

    override fun dispatchTouchEvent(ev: MotionEvent): Boolean {
        when (ev.actionMasked) {
            MotionEvent.ACTION_DOWN -> {
                firstTouchedKey = findEnclosingKeyButton(
                    findChildUnder(this, ev.x.toInt(), ev.y.toInt())
                )
                touchSize = 0
                return super.dispatchTouchEvent(ev)
            }
            MotionEvent.ACTION_POINTER_DOWN -> {
                touchSize = ev.pointerCount
                if (ev.pointerCount >= 2) {
                    // 이 이벤트를 발생시킨 포인터의 인덱스
                    val idx = ev.actionIndex
                    val x = ev.getX(idx).toInt()
                    val y = ev.getY(idx).toInt()

                    secondTouchedKey = findEnclosingKeyButton(
                        findChildUnder(this, x, y)
                    )

                    // 첫 번째, 두 번째 키가 모두 잡혔으면 순서대로 로깅/처리
                    firstTouchedKey?.let { first ->
                        secondTouchedKey?.let { second ->
                            Log.i(
                                "Keyboard",
                                "첫번째: ${first.keyModel?.ltText}, 두번째: ${second.keyModel?.ltText}"
                            )
                            //  proxy?.finishComposingText()
                            // 예: InputManager로 동시 입력 처리 후 커밋
                            val touchedButtons = mutableListOf<CustomKeyButton>()
                            touchedButtons.add(firstTouchedKey!!)
                            touchedButtons.add(secondTouchedKey!!)


                            val ch = InputManager.shared
                                .handleSimultaneous(touchedButtons.take(2), currentLanguage) ?: ""
                            val split =  ch.split(",")
                            Log.i("더블터치",ch)

                            if(ch == "")
                                return true

                            if (currentState == KeyType.KOR) {

                                for(i in 0..split.count() - 1){
                                    // 2) 새로운 키 처리
                                    automata.hangulAutomata(split[i])
                                    val composed = automata.buffer.joinToString("")
                                    Log.d("Keyboard", "composed : $composed")
                                    // 3) 새로 조합된 문자열 삽입
                                    listener?.onKey(KeyType.KOR, composed)
                                    // proxy?.commitText(composed,0)

                                    // 4) 삭제할 길이 갱신
                                    composingLength = composed.length
                                }

                            } else {
                                listener?.onKey(KeyType.LETTER, ch)
                                // proxy?.commitText(ch,1)
                            }
                        }
                    }
                    return true
                }

            }
        }
        return super.dispatchTouchEvent(ev)
    }

    /** 원래의 findChildUnder() 그대로 사용합니다 */
    private fun findChildUnder(parent: ViewGroup, x: Int, y: Int): View? {
        for (i in parent.childCount - 1 downTo 0) {
            val child = parent.getChildAt(i)
            // (1) 내부 뷰그룹부터 재귀
            if (child is ViewGroup) {
                val cx = x - child.left
                val cy = y - child.top
                findChildUnder(child, cx, cy)?.let { return it }
            }
            // (2) 자기 자신의 히트 박스 검사
            val rect = Rect().apply { child.getHitRect(this) }
            if (rect.contains(x, y)) {
                return child
            }
        }
        return null
    }

    /**
     * findChildUnder()로 찾은 뷰가 TextView든 ImageView든,
     * 그 조상 중 CustomKeyButton이 있으면 리턴. 없으면 null.
     */
    private fun findEnclosingKeyButton(view: View?): CustomKeyButton? {
        var v = view
        while (v != null && v !is CustomKeyButton) {
            val parent = v.parent
            v = if (parent is View) parent else null
        }
        return v as? CustomKeyButton
    }

}
